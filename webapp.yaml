apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-deployment
  labels:
    app: webapp
# deployment specific configuration
spec:
  replicas: 1
  selector:
    # this label is used by deployment to identify which pods actually belong to it 
    matchLabels:
      app: webapp
  # configuration of pod
  template: 
    metadata:
      labels:
        app: webapp
    spec:
      # list of containers, mostly one app per pod
      containers:
      # container name 
      - name: webapp 
        image: nanajanashia/k8s-demo-app:v1.0
        ports:
        - containerPort: 3000
        env:
        - name: USER_NAME
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: mongo-user
        - name: USER_PWD
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: mongo-password
        - name: DB_URL
          valueFrom:
            configMapKeyRef:
              name: mongo-config
              key: mongo-url
---
apiVersion: v1
kind: Service
metadata:
  # name of the 'endpoint' which will be used to access mongo
  name: webapp-service
spec:
  type: NodePort
  # How does service know which pods belong to it and which pods it should send requests to? Using selector. Should match the label of the pods
  selector:
    app: webapp
  ports:
    - protocol: TCP
      # port at which service will be accessible within the cluster. Common standard to keep port the same as target port to keep things simple
      port: 3000 
      # ports of the pods, that belong to the service
      targetPort: 3000
      # must be within the range 30000-32767 
      nodePort: 30100
